@using Client.Auth
@using Microsoft.AspNetCore.Components.Authorization
@inherits LayoutComponentBase
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider

<MudLayout>
    <MudAppBar Elevation="1">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudText Typo="Typo.h5" Class="ml-3">Application</MudText>
        <MudText Typo="Typo.h5" Class="ml-3">@_firstName</MudText>
        <MudSpacer />
        <MudIconButton Icon="@Icons.Material.Filled.MoreVert" Color="Color.Inherit" Edge="Edge.End" />

        <MudButton Variant="Variant.Text" Color="Color.Inherit" OnClick="Login" Class="ml-3">Login</MudButton>
        <MudButton Variant="Variant.Text" Color="Color.Inherit" OnClick="Logout" Class="ml-3">Logout</MudButton>

    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <NavMenu />
    </MudDrawer>
    <MudMainContent Class="mt-16 pa-4">
        @Body
    </MudMainContent>
</MudLayout>

@code {
    private bool _drawerOpen = true;
    private string _firstName = null;

    private void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnInitializedAsync()
    {
        var customStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

        customStateProvider.AuthenticationStateChanged += CustomStateProvider_AuthenticationStateChanged;
        var authenticationState = await customStateProvider.GetAuthenticationStateAsync();

        if (authenticationState.User.Identity.IsAuthenticated)
        {
            var name = authenticationState.User.Identity.Name;
            _firstName = name;

            StateHasChanged();
        }
    }

    private void CustomStateProvider_AuthenticationStateChanged(Task<AuthenticationState> task)
    {
        var authenticationState = task.Result;

        if (authenticationState.User.Identity.IsAuthenticated)
        {
            var name = authenticationState.User.Identity.Name;
            _firstName = name;
        }
        else
        {
            _firstName = null;
        }
      
        StateHasChanged();
    }

    private async Task Login()
    {
        // Вход пользователя
        await AuthService.LoginAsync("username", "password");

        var customStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;
        await customStateProvider.NotifyUserAuthentication();
    }

    private async Task Logout()
    {
        // Выход пользователя
        await AuthService.LogoutAsync();

        var customStateProvider = (CustomAuthenticationStateProvider)AuthStateProvider;

        customStateProvider.NotifyUserLogout();
    }
}